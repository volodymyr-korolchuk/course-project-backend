// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id    Int    @id @default(autoincrement())
  title String @db.VarChar(64)

  Users User[]

  @@map("roles")
}

model User {
  id             Int    @id @default(autoincrement())
  email          String @unique @db.VarChar(64)
  hashedPassword String @map("hashed_password") @db.VarChar(72)
  roleId         Int    @map("role_id")

  Role     Role      @relation(fields: [roleId], references: [id])
  Customer Customer?
  Staff    Staff?

  @@map("users")
}

model Customer {
  id          Int    @id @default(autoincrement())
  userId      Int    @unique @map("user_id")
  firstName   String @map("first_name") @db.VarChar(128)
  lastName    String @map("last_name") @db.VarChar(128)
  phoneNumber String @map("phone_number") @db.VarChar(32)

  User     User      @relation(fields: [userId], references: [id])
  Leasings Leasing[]

  @@map("customers")
}

model Staff {
  id         Int    @id @default(autoincrement())
  userId     Int    @unique @map("user_id")
  firstName  String @map("first_name") @db.VarChar(128)
  lastName   String @map("last_name") @db.VarChar(128)
  patronymic String @db.VarChar(128)
  positionId Int    @map("position_id")

  Position       Position        @relation(fields: [positionId], references: [id])
  User           User            @relation(fields: [userId], references: [id])
  SalaryPayments SalaryPayment[]
  Leasings       Leasing[]

  @@map("staff")
}

model Position {
  id    Int    @id @default(autoincrement())
  title String @db.VarChar(64)

  Staff Staff[]

  @@map("positions")
}

model SalaryPayment {
  id          Int     @id @default(autoincrement())
  employeeId  Int     @map("employee_id")
  totalAmount Decimal @map("total_amount") @db.Decimal(10, 2)

  Employee Staff @relation(fields: [employeeId], references: [id])

  @@map("salary_payments")
}

model Fleet {
  id                Int    @id @default(autoincrement())
  make              String @db.VarChar(64)
  model             String @db.VarChar(64)
  productionYear    Int    @map("production_year")
  color             String @db.VarChar(32)
  classId           Int    @map("class_id")
  mileage           Int
  vrm               String @db.VarChar(8)
  parkingLocationId Int    @map("parking_location_id")

  VehicleClass       VehicleClass        @relation(fields: [classId], references: [id])
  ParkingLocation    ParkingLocation     @relation(fields: [parkingLocationId], references: [id])
  Leasings           Leasing[]
  MaintenanceReports MaintenanceReport[]
  DamageReports      DamageReport[]

  @@map("fleet")
}

model VehicleClass {
  id           Int     @id @default(autoincrement())
  title        String  @unique @db.VarChar(128)
  pricePerHour Decimal @map("price_per_hour") @db.Decimal(10, 2)
  description  String  @db.VarChar(4096)

  Vehicles Fleet[]

  @@map("vehicle_classes")
}

model ParkingLocation {
  id      Int    @id @default(autoincrement())
  address String @unique @db.VarChar(256)

  Vehicles Fleet[]

  @@map("parking_locations")
}

model Leasing {
  id                  Int      @id @default(autoincrement())
  vehicleId           Int      @map("vehicle_id")
  createdByEmployeeId Int      @map("created_by_employee_id")
  customerId          Int      @map("customer_id")
  pickupDate          DateTime @map("pickup_date")
  returnDate          DateTime @map("return_date")
  allowedMileage      Int      @map("allowed_mileage")

  Customer Customer @relation(fields: [customerId], references: [id])
  Vehicle  Fleet    @relation(fields: [vehicleId], references: [id])
  Employee Staff    @relation(fields: [createdByEmployeeId], references: [id])
  Invoice  Invoice?

  @@map("leasings")
}

model Invoice {
  id              Int     @id @default(autoincrement())
  leasingId       Int     @unique @map("leasing_id")
  amountDue       Decimal @map("amount_due") @db.Decimal(10, 2)
  insuranceAmount Decimal @map("insurance_amount") @db.Decimal(10, 2)
  status          String  @db.VarChar(32)

  Leasing Leasing  @relation(fields: [leasingId], references: [id])
  Payment Payment?

  @@map("invoices")
}

model Payment {
  id          Int      @id @default(autoincrement())
  invoiceId   Int      @unique @map("invoice_id")
  createdOn   DateTime @map("created_on")
  totalAmount Decimal  @map("total_amount") @db.Decimal(10, 2)

  Invoice Invoice @relation(fields: [invoiceId], references: [id])

  @@map("payments")
}

model MaintenanceReport {
  id          Int      @id @default(autoincrement())
  vehicleId   Int      @map("vehicle_id")
  startDate   DateTime @map("start_date")
  endDate     DateTime @map("end_date")
  description String   @db.VarChar(4096)
  totalCost   Decimal  @map("total_cost") @db.Decimal(10, 2)

  Vehicle Fleet @relation(fields: [vehicleId], references: [id])

  @@map("maintenance_reports")
}

model DamageReport {
  id          Int    @id @default(autoincrement())
  vehicleId   Int    @map("vehicle_id")
  description String @db.VarChar(4096)

  Vehicle Fleet @relation(fields: [vehicleId], references: [id])

  @@map("damage_reports")
}

model MonthlyAnalytics {
  id                  Int      @id @default(autoincrement())
  leasingsIncome      Decimal  @map("leasings_income") @db.Decimal(10, 2)
  salariesPaid        Decimal  @map("salaries_paid") @db.Decimal(10, 2)
  taxesPaid           Decimal  @map("taxes_paid") @db.Decimal(10, 2)
  maintenanceExpenses Decimal  @map("maintenance_expenses") @db.Decimal(10, 2)
  fuelExpenses        Decimal  @map("fuel_expenses") @db.Decimal(10, 2)
  createdOn           DateTime @map("created_on")

  @@map("monthly_analytics")
}
